# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nyRB2tj3aIPVXE87JPN3Nd8g4cO7A27k
"""

import numpy as np
import os
import numpy as np
from numpy.fft import fft2, ifft2
from scipy.signal import gaussian, convolve2d
import matplotlib.pyplot as plt

import cv2
import os
import skimage.filters
from skimage.util import random_noise
from skimage.io import imread
from skimage import color, data, restoration

folder = "/content/test"
folder_ga="/content/folder_ga"
folder_sp="/content/folder_sp"
folder_ga_sp="/content/folder_ga_sp"
ga="/content/Filtered_Images/ga"
sp="/content/Filtered_Images/sp"
combine="/content/Filtered_Images/combine"

def blur(img, kernel_size = 3):
	dummy = np.copy(img)
	h = np.eye(kernel_size) / kernel_size
	dummy = convolve2d(dummy, h, mode = 'valid')
	return dummy

def add_gaussian_noise(img, sigma):
	gauss = np.random.normal(0, sigma, np.shape(img))
	noisy_img = img + gauss
	noisy_img[noisy_img < 0] = 0
	noisy_img[noisy_img > 255] = 255
	return noisy_img

def wiener_filter(img, kernel, K):
	kernel /= np.sum(kernel)
	dummy = np.copy(img)
	dummy = fft2(dummy)
	kernel = fft2(kernel, s = img.shape)
	kernel = np.conj(kernel) / (np.abs(kernel) ** 2 + K)
	dummy = dummy * kernel
	dummy = np.abs(ifft2(dummy))
	return dummy

def gaussian_kernel(kernel_size = 3):
	h = gaussian(kernel_size, kernel_size / 3).reshape(kernel_size, 1)
	h = np.dot(h, h.transpose())
	h /= np.sum(h)
	return h

def rgb2gray(rgb):
	return np.dot(rgb[...,:3], [0.2989, 0.5870, 0.1140])

for filename in os.listdir(folder): 
     img = cv2.imread(os.path.join(folder, filename))

     # 1. GENERATING NOISY IMAGES  
     # 1.2. Adding Gaussian Noise 
     ga_noise=random_noise(img,mode='gaussian',seed=None,clip=True)
     image_gaussian=np.array(255*ga_noise, dtype = 'uint8')
     # 1.3. Adding Salt and Pepper Noise 
     sp_noise=random_noise(img, mode='s&p',amount=0.1)
     image_sp=np.array(255*sp_noise, dtype = 'uint8')
     # 1.4. Adding combined Noise 
     g_sp_noise=random_noise(image_gaussian, mode='s&p',amount=0.1)
     image_g_sp=np.array(255*g_sp_noise, dtype = 'uint8')

     # 2. APPLYING FILTERS TO THE IMAGES  
     # 2.1. initialize the kernel 
     kernel = gaussian_kernel(3)
     # 2.2. Generate Grey Scale Images
     img_grey_scale_HR=rgb2gray(img)
     img_grey_scale_Gaussian=rgb2gray(image_gaussian)
     img_grey_scale_SandP=rgb2gray(image_sp)
     img_grey_scale_Combined=rgb2gray(image_g_sp)
     #2.3.  Apply Wiener Filter
     # 2.3.1. HR Images
     wiener_HR= wiener_filter(img_grey_scale_HR, kernel, K = 10)
     # 2.3.2. images with Gaussian Noise 
     wiener_G= wiener_filter(img_grey_scale_Gaussian, kernel, K = 10)
     # 2.3.3. Noisy images with SP Noise 
     wiener_SP= wiener_filter(img_grey_scale_SandP, kernel, K = 10)
     # 2.3.4. Noisy images with Combined Noise 
     wiener_Combined= wiener_filter(img_grey_scale_Combined, kernel, K = 10)
     # 2.4. Apply Median Filter
     # 2.4.1. HR Images
     median_HR= skimage.filters.median(img)
     # 2.4.2. Noisy images with Gaussian Noise 
     median_G= skimage.filters.median(image_gaussian)
     # 2.4.3. Noisy images with SP Noise 
     median_sp= skimage.filters.median(image_sp)
     #2.4.4. Noisy images with Combined Noise
     median_combined= skimage.filters.median(image_g_sp)

     # 3. SAVING FILES 
     #3.1. Saving Images with Added Noise 
     cv2.imwrite(os.path.join(Noise_G, "G_" + filename), image_gaussian)
     cv2.imwrite(os.path.join(Noise_SP, "SP_" + filename), image_sp)
     cv2.imwrite(os.path.join(Noise_COMBINED,"G_SP_" + filename), image_g_sp)
     #3.2. Saving Images with applied Wiener_Filter 
     cv2.imwrite(os.path.join(FILTER_W_H, "W_HR_" + filename), wiener_HR)
     cv2.imwrite(os.path.join(FILTER_W_G, "W_G_" + filename), wiener_G)
     cv2.imwrite(os.path.join(FILTER_W_SP, "W_SP_" + filename), wiener_SP)
     cv2.imwrite(os.path.join(FILTER_W_G_SP,"W_COMBINED_" + filename), wiener_combined)
     #3.3. Saving Images with applied Median_Filter 
     cv2.imwrite(os.path.join(FILTER_M_H, "M_HR_" + filename), median_HR)
     cv2.imwrite(os.path.join(FILTER_M_G, "M_G_" + filename), median_G)
     cv2.imwrite(os.path.join(FILTER_M_SP, "M_SP_" + filename), median_sp)
     cv2.imwrite(os.path.join(FILTER_M_G_SP,"M_COMBINED_" + filename), median_combined)

# Calculating statistical components from the filtered images 
def image_parameters(Z):
    
    h,w = np.shape(Z)
    
# Z is the input image with added noise 
# here x gives row of the image matrix while y gives number of columns of the image matrix
    x = range(w)
    y = range(h)

    X,Y = np.meshgrid(x,y)

    #Centroid (mean)
    cx = np.sum(Z*X)/np.sum(Z)
    cy = np.sum(Z*Y)/np.sum(Z)

    ###Standard deviation
    x2 = (range(w) - cx)**2
    y2 = (range(h) - cy)**2

    X2,Y2 = np.meshgrid(x2,y2)

    #Find the variance
    vx = np.sum(Z*X2)/np.sum(Z)
    vy = np.sum(Z*Y2)/np.sum(Z)

    #SD is the sqrt of the variance
    sx,sy = np.sqrt(vx),np.sqrt(vy)

    ###Skewness
    x3 = (range(w) - cx)**3
    y3 = (range(h) - cy)**3

    X3,Y3 = np.meshgrid(x3,y3)

    #Find the thid central moment
    m3x = np.sum(Z*X3)/np.sum(Z)
    m3y = np.sum(Z*Y3)/np.sum(Z)

    #Skewness is the third central moment divided by SD cubed
    skx = m3x/sx**3
    sky = m3y/sy**3

    ###Kurtosis
    x4 = (range(w) - cx)**4
    y4 = (range(h) - cy)**4

    X4,Y4 = np.meshgrid(x4,y4)

    #Find the fourth central moment
    m4x = np.sum(Z*X4)/np.sum(Z)
    m4y = np.sum(Z*Y4)/np.sum(Z)

    #Kurtosis is the fourth central moment divided by SD to the fourth power
    kx = m4x/sx**4
    ky = m4y/sy**4

    return cx,cy,sx,sy,skx,sky,kx,ky

# Extracting image stats from HR Images 
text=os.path.join(folder_ga, "g_" + filename)
print(text)
hr=cv2.imread(os.path.join(folder_ga, "g_" + filename))
hr=rgb2gray(hr)
print(hr.shape)
cx,cy,sx,sy,skx,sky,kx,ky= image_parameters(hr)
print(cx,cy,sx,sy,skx,sky,kx,ky)

# Extracting image stats from Images having Gaussian Noise

# Extracting image stats from Images having Salt and Pepper Noise

# Extracting image stats from Images having Combination of Both Noises

# Creation of Data Frame and csv file to initiate Neural Network

# Creation of Neural Network
