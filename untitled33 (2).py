# -*- coding: utf-8 -*-
"""Untitled33.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19MMGff-_SrLgvP275UtkiliynWhPOaDg
"""

! git clone https://github.com/batraamul/Image_Noise_Identification

import numpy as np
import os
import numpy as np
from numpy.fft import fft2, ifft2
from scipy.signal import gaussian, convolve2d
import matplotlib.pyplot as plt
import cv2
import os
import skimage.filters
from skimage.util import random_noise
from skimage.io import imread
from skimage import color, data, restoration
import pandas as pd 
from PIL import Image
from scipy.stats import skew, kurtosis

# Initializing the folders address under various scenarioes

folder = "/content/Image_Noise_Identification/Data/Images/HR_Images"
folder_ga="/content/Image_Noise_Identification/Data/Images/Noisy Images/Gaussian"
folder_sp="/content/Image_Noise_Identification/Data/Images/Noisy Images/SP"
folder_ga_sp="/content/Image_Noise_Identification/Data/Images/Noisy Images/Combined"

filtered_HR_W="/content/Image_Noise_Identification/Data/Images/Filtered_Images/HR_Filtered/Wiener"
filtered_ga_W="/content/Image_Noise_Identification/Data/Images/Filtered_Images/Gaussian_Filtered/Wiener"
fileter_sp_W="/content/Image_Noise_Identification/Data/Images/Filtered_Images/SP/Wiener"
filtered_combined_W="/content/Image_Noise_Identification/Data/Images/Filtered_Images/Combined/Wiener"

filtered_HR_M="/content/Image_Noise_Identification/Data/Images/Filtered_Images/HR_Filtered/Median"
filtered_ga_M="/content/Image_Noise_Identification/Data/Images/Filtered_Images/Gaussian_Filtered/Median"
fileter_sp_M="/content/Image_Noise_Identification/Data/Images/Filtered_Images/SP/Median"
filtered_combined_M="/content/Image_Noise_Identification/Data/Images/Filtered_Images/Combined/Median"

# Self compiled Function Definations 

def blur(img, kernel_size = 3):
	dummy = np.copy(img)
	h = np.eye(kernel_size) / kernel_size
	dummy = convolve2d(dummy, h, mode = 'valid')
	return dummy

def add_gaussian_noise(img, sigma):
	gauss = np.random.normal(0, sigma, np.shape(img))
	noisy_img = img + gauss
	noisy_img[noisy_img < 0] = 0
	noisy_img[noisy_img > 255] = 255
	return noisy_img

def wiener_filter(img, kernel, K):
	kernel /= np.sum(kernel)
	dummy = np.copy(img)
	dummy = fft2(dummy)
	kernel = fft2(kernel, s = img.shape)
	kernel = np.conj(kernel) / (np.abs(kernel) ** 2 + K)
	dummy = dummy * kernel
	dummy = np.abs(ifft2(dummy))
	return dummy

def gaussian_kernel(kernel_size = 3):
	h = gaussian(kernel_size, kernel_size / 3).reshape(kernel_size, 1)
	h = np.dot(h, h.transpose())
	h /= np.sum(h)
	return h

def rgb2gray(rgb):
	return np.dot(rgb[...,:3], [0.2989, 0.5870, 0.1140])
 
 # Calculating statistical components from the filtered images 

def image_parameters(image):
  # Calculate skewness 
  sk=skew(image.reshape(-1))

  # Calculate kurtosis 
  k=kurtosis(image.reshape(-1)) 

  return sk,k

# Picking up HR images one by one to process
# Initializing data frame to store the data for ANN learning 
Data_Frame = pd.DataFrame(columns=['Noise_Type','Kurtosis_Wiener','Kurtosis_Median','Skewness_Wiener','Skewness_Median'])

def populate_Dataframe(Image_Type,kw,sw,km,sm):
  Temp2= pd.DataFrame({'Noise_Type': [Image_Type],'Kurtosis_Wiener': [kw],'Kurtosis_Median': [km],'Skewness_Wiener':[sw],'Skewness_Median':[sm]})
  return Temp2

# Picking up images one by one and process accordingly 

for filename in os.listdir(folder): 
     img = cv2.imread(os.path.join(folder, filename))

     # 1. GENERATING NOISY IMAGES  
     # 1.2. Adding Gaussian Noise 
     ga_noise=random_noise(img,mode='gaussian',seed=None,clip=True)
     image_gaussian=np.array(255*ga_noise, dtype = 'uint8')
     # 1.3. Adding Salt and Pepper Noise 
     sp_noise=random_noise(img, mode='s&p',amount=0.1)
     image_sp=np.array(255*sp_noise, dtype = 'uint8')
     # 1.4. Adding combined Noise 
     g_sp_noise=random_noise(image_gaussian, mode='s&p',amount=0.1)
     image_g_sp=np.array(255*g_sp_noise, dtype = 'uint8')

     # 2. APPLYING FILTERS TO THE IMAGES  
     # 2.1. initialize the kernel 
     kernel = gaussian_kernel(3)
     # 2.2. Generate Grey Scale Images
     img_grey_scale_HR=rgb2gray(img)
     img_grey_scale_Gaussian=rgb2gray(image_gaussian)
     img_grey_scale_SandP=rgb2gray(image_sp)
     img_grey_scale_Combined=rgb2gray(image_g_sp)
     #2.3.  Apply Wiener Filter
     # 2.3.1. HR Images
     wiener_HR= wiener_filter(img_grey_scale_HR, kernel, K = 10)
     # 2.3.2. images with Gaussian Noise 
     wiener_G= wiener_filter(img_grey_scale_Gaussian, kernel, K = 10)
     # 2.3.3. Noisy images with SP Noise 
     wiener_SP= wiener_filter(img_grey_scale_SandP, kernel, K = 10)
     # 2.3.4. Noisy images with Combined Noise 
     wiener_Combined= wiener_filter(img_grey_scale_Combined, kernel, K = 10)
     # 2.4. Apply Median Filter
     # 2.4.1. HR Images
     median_HR= skimage.filters.median(img)
     # 2.4.2. Noisy images with Gaussian Noise 
     median_G= skimage.filters.median(image_gaussian)
     # 2.4.3. Noisy images with SP Noise 
     median_sp= skimage.filters.median(image_sp)
     #2.4.4. Noisy images with Combined Noise
     median_combined= skimage.filters.median(image_g_sp)

     # 3. SAVING FILES 
     #3.1. Saving Images with Added Noise 
     cv2.imwrite(os.path.join(folder_ga, "G_" + filename), image_gaussian)
     cv2.imwrite(os.path.join(folder_sp, "SP_" + filename), image_sp)
     cv2.imwrite(os.path.join(folder_ga_sp,"G_SP_" + filename), image_g_sp)
     #3.2. Saving Images with applied Wiener_Filter 
     cv2.imwrite(os.path.join(filtered_HR_W, "W_HR_" + filename), wiener_HR)
     cv2.imwrite(os.path.join(filtered_ga_W, "W_G_" + filename), wiener_G)
     cv2.imwrite(os.path.join(fileter_sp_W, "W_SP_" + filename), wiener_SP)
     cv2.imwrite(os.path.join(filtered_combined_W,"W_COMBINED_" + filename), wiener_Combined)
     #3.3. Saving Images with applied Median_Filter 
     cv2.imwrite(os.path.join(filtered_HR_M, "M_HR_" + filename), median_HR)
     cv2.imwrite(os.path.join(filtered_ga_M, "M_G_" + filename), median_G)
     cv2.imwrite(os.path.join(fileter_sp_M, "M_SP_" + filename), median_sp)
     cv2.imwrite(os.path.join(filtered_combined_M,"M_COMBINED_" + filename), median_combined)

     # Deriving statistical parameters 
     #wiener_HR=rgb2gray(wiener_HR)
     # 1-HR, 2-G, 3-SP, 4-COMBINED
     sk_w_hr,k_w_hr= image_parameters(wiener_HR)
     #wiener_G=rgb2gray(wiener_G)
     sk_w_g,k_w_g= image_parameters(wiener_G)
     #wiener_SP=rgb2gray(wiener_SP)
     sk_w_sp,k_w_sp= image_parameters(wiener_SP)
     #wiener_Combined=rgb2gray(wiener_Combined)
     sk_w_combined,k_w_combined= image_parameters(wiener_Combined)
     #median_HR=rgb2gray(median_HR)

     sk_m_hr,k_m_hr= image_parameters(median_HR)
     #median_G=rgb2gray(median_G)
     sk_m_g,k_m_g= image_parameters(median_G)
     #median_sp=rgb2gray(median_sp)
     sk_m_sp,k_m_sp= image_parameters(median_sp)
     #wiener_median_HR=rgb2gray(median_combined)
     sk_m_combined,k_m_combined= image_parameters(median_combined)

     # Applending statistical data to the data frame 
     Data_Frame=Data_Frame.append(populate_Dataframe(1,k_w_hr,sk_w_hr,k_m_hr,sk_m_hr),ignore_index=1)
     Data_Frame=Data_Frame.append(populate_Dataframe(2,k_w_g,sk_w_g,k_m_g,sk_m_g),ignore_index=1)
     Data_Frame=Data_Frame.append(populate_Dataframe(3,k_w_sp,sk_w_sp,k_m_sp,sk_m_sp),ignore_index=1)
     Data_Frame=Data_Frame.append(populate_Dataframe(4,k_w_combined,sk_w_combined,k_m_combined,sk_m_combined),ignore_index=1)

Data_Frame.head

